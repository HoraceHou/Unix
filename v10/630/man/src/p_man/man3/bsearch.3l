.\"#ident	"@(#)ccsman:g3c/bsearch	1.2"
'\"macro stdmacro
.nr X
.if \nX=0 .ds x} BSEARCH 3L "630 MTG" "\&"
.TH \*(x}
.SH NAME
bsearch \- binary search a sorted table
.SH SYNOPSIS
.B #include <ccs/search.h>
.PP
.B "char \(**bsearch ((char \(**) key, (char \(**) base, nel, sizeof (\(**key), compar)"
.br
.B unsigned nel;
.br
.B int (\(**compar)( );
.SH DESCRIPTION
.I bsearch\^
is a binary search routine generalized from Knuth (6.2.1) Algorithm B.
It returns a pointer into a table indicating where
a datum may be found.
The table must be previously sorted in increasing order
according to a provided comparison function.
.I Key\^
points to a datum instance to be sought in the table.
.I Base\^
points to the element at the base of the table.
.I Nel\^
is the number of elements in the table.
.I Compar\^
is the name of the comparison function,
which is called with two arguments that point
to the elements being compared.
The function must return
an integer less than, equal to, or greater than zero
as accordingly the first argument is to be considered
less than, equal to, or greater than the second.
.SH EXAMPLE
The example below searches a table containing pointers
to nodes consisting of a string and its length.
The table is ordered alphabetically on the string in the
node pointed to by each entry.
.PP
This code fragment reads in strings and either finds the
corresponding node and prints out the string and its length,
or prints an error message.
.PP
.RS
.nf
.ft CM
.S -3
.ss 18
#include <dmd.h>
#include <dmdio.h>
#include <ccs/search.h>

#define	\s-1TABSIZE\s+1	1000

struct node {			/\(** stored in the table \(**/
	char \(**string;
	int length;
};
struct node table[\s-1TABSIZE\s+1];	/\(** table to be searched \(**/
	.
	.
	.
{
	struct node \(**node_ptr, node;
	int node_compare( );  /\(** compares 2 nodes \(**/
	char str_space[20];   /\(** to read string into \(**/
	.
	.
	.
	node.string = str_space;
	while (gets(node.string) != \s-1NULL\s+1) {
		node_ptr = (struct node \(**)bsearch(
			   (char \(**)(&node),
			   (char \(**)table, \s-1TABSIZE\s+1,
			   sizeof(struct node),
			   node_compare);
		if (node_ptr != \s-1NULL\s+1) {
			printf("string = %s, length = %d\en",
				node_ptr\(mi>string,
			    node_ptr\(mi>length);
		} else {
			printf("not found: %s\en", node.string);
		}
	}
}
/\(**
	This routine compares two nodes based on an
	alphabetical ordering of the string field.
\(**/
int
node_compare(node1, node2)
char \(**node1, \(**node2;
{
	return (strcmp(
			((struct node \(**)node1)\(mi>string,
			((struct node \(**)node2)\(mi>string));
}
.ft 1
.S +3
.SS Notes
The pointers to the key and the element at the base of
the table should be of type pointer-to-element,
and cast to type pointer-to-character.
.br
The comparison function need not compare every byte,
so arbitrary data may be contained in the elements in addition to the values
being compared.
.br
Although 
.I bsearch\^
is declared as type pointer-to-character,
the value returned should be cast into type pointer-to-element.
.SH SEE ALSO
lsearch(3L), qsort(3L).
.SH DIAGNOSTICS
A
\s-1NULL\s+1
pointer is returned if the key cannot be found in the table.
.Ee
